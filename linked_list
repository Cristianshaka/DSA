class Node:
    """
    An object for storing a single node of a linked list.
    Models two attributes - data and the link to the next node in the list.
    """
    def __init__(self, data):
        self.data = data
        self.next_node = None

    def __repr__(self):
        return "<Node data: %s>" % self.data

class LinkedList:
    """
    Singly linked list.
    """
    def __init__(self):
        self.head = None 

    def is_empty(self):
        return self.head is None

    def size(self):
        """
        Return the number of nodes in the list.
        Takes O(n) time.
        """
        current = self.head
        count = 0
        while current:
            count += 1
            current = current.next_node
        return count

    def add(self, data):
        """
        Adds new node containing data at the head of the list.
        """
        new_node = Node(data)
        new_node.next_node = self.head
        self.head = new_node

    def found(self, data):
        """
        Checks if a node with the given data exists in the list.
        Returns True if found, False otherwise.
        Takes O(n) time.
        """
        current = self.head
        while current:
            if current.data == data:
                return True
            current = current.next_node
        return False

    def __repr__(self):
        """
        Return a string representation of the list.
        Takes O(n) time.
        """
        nodes = []
        current = self.head
        while current:
            if current is self.head:
                nodes.append(f"[Head: {current.data}]")
            elif current.next_node is None:
                nodes.append(f"[Tail: {current.data}]")
            else:
                nodes.append(f"[{current.data}]")
            current = current.next_node
        return " -> ".join(nodes)
